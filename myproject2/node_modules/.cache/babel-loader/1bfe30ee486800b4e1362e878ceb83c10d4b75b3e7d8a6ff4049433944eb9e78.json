{"ast":null,"code":"import axios from 'axios';\nimport jwt from 'jsonwebtoken';\n\n// 设置JWT的密钥\nconst JWT_SECRET = 'your_jwt_secret';\n\n// 设置Axios的默认配置\naxios.defaults.baseURL = 'http://localhost:8181/';\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n\n// 创建一个API请求函数\nexport function api(endpoint, method, data = null) {\n  return axios({\n    method: method,\n    url: endpoint,\n    data: data\n  }).then(response => response.data).catch(error => {\n    if (error.response.status === 401) {\n      // 如果API返回401错误，则表示未授权，需要重新认证\n      localStorage.removeItem('token');\n      location.reload();\n    } else {\n      throw error;\n    }\n  });\n}\n\n// 创建一个认证函数\nexport function authenticate(username, password) {\n  return axios.post('auth/token', {\n    username: username,\n    password: password\n  }).then(response => {\n    // 从API响应中获取JWT并将其存储到本地存储中\n    const token = response.data.access_token;\n    localStorage.setItem('token', token);\n    // 使用JWT密钥验证并返回JWT负载\n    const payload = jwt.verify(token, JWT_SECRET);\n    return payload;\n  });\n}","map":{"version":3,"names":["axios","jwt","JWT_SECRET","defaults","baseURL","headers","common","localStorage","getItem","api","endpoint","method","data","url","then","response","catch","error","status","removeItem","location","reload","authenticate","username","password","post","token","access_token","setItem","payload","verify"],"sources":["D:/A/repository/private homework2/myproject2/src/apiauthentification.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// 设置JWT的密钥\r\nconst JWT_SECRET = 'your_jwt_secret';\r\n\r\n// 设置Axios的默认配置\r\naxios.defaults.baseURL = 'http://localhost:8181/';\r\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('token');\r\n\r\n// 创建一个API请求函数\r\nexport function api(endpoint, method, data = null) {\r\n    return axios({\r\n        method: method,\r\n        url: endpoint,\r\n        data: data,\r\n    })\r\n        .then(response => response.data)\r\n        .catch(error => {\r\n            if (error.response.status === 401) {\r\n                // 如果API返回401错误，则表示未授权，需要重新认证\r\n                localStorage.removeItem('token');\r\n                location.reload();\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n}\r\n\r\n// 创建一个认证函数\r\nexport function authenticate(username, password) {\r\n    return axios.post('auth/token', { username: username, password: password })\r\n        .then(response => {\r\n            // 从API响应中获取JWT并将其存储到本地存储中\r\n            const token = response.data.access_token;\r\n            localStorage.setItem('token', token);\r\n            // 使用JWT密钥验证并返回JWT负载\r\n            const payload = jwt.verify(token, JWT_SECRET);\r\n            return payload;\r\n        });\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,cAAc;;AAE9B;AACA,MAAMC,UAAU,GAAG,iBAAiB;;AAEpC;AACAF,KAAK,CAACG,QAAQ,CAACC,OAAO,GAAG,wBAAwB;AACjDJ,KAAK,CAACG,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;AAE1F;AACA,OAAO,SAASC,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,GAAG,IAAI,EAAE;EAC/C,OAAOZ,KAAK,CAAC;IACTW,MAAM,EAAEA,MAAM;IACdE,GAAG,EAAEH,QAAQ;IACbE,IAAI,EAAEA;EACV,CAAC,CAAC,CACGE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACH,IAAI,CAAC,CAC/BI,KAAK,CAACC,KAAK,IAAI;IACZ,IAAIA,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC/B;MACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;MAChCC,QAAQ,CAACC,MAAM,EAAE;IACrB,CAAC,MAAM;MACH,MAAMJ,KAAK;IACf;EACJ,CAAC,CAAC;AACV;;AAEA;AACA,OAAO,SAASK,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC7C,OAAOxB,KAAK,CAACyB,IAAI,CAAC,YAAY,EAAE;IAAEF,QAAQ,EAAEA,QAAQ;IAAEC,QAAQ,EAAEA;EAAS,CAAC,CAAC,CACtEV,IAAI,CAACC,QAAQ,IAAI;IACd;IACA,MAAMW,KAAK,GAAGX,QAAQ,CAACH,IAAI,CAACe,YAAY;IACxCpB,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC;IACA,MAAMG,OAAO,GAAG5B,GAAG,CAAC6B,MAAM,CAACJ,KAAK,EAAExB,UAAU,CAAC;IAC7C,OAAO2B,OAAO;EAClB,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}
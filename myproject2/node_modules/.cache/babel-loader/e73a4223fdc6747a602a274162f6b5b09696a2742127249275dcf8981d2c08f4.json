{"ast":null,"code":"import axios from \"axios\";\n/*\r\n* 用于解决前后端连接的跨域问题\r\n* */\n\nconst request = axios.create({\n  // baseURL: '/api', // 通过/api别名指定后端路由\n  // baseURL: process.env.VUE_APP_URL, // 通过/api别名指定后端路由\n  timeout: 5000,\n  headers: {}\n});\n\n// axios的拦截器(类似python的中间件的request)\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  // if(config.requestBase==='VUE_APP_URL'){\n  //     //设置JSON数据格式\n  //     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  //\n  // }else if (config.requestBase==='VUE_APP_URL_TWO'){\n  //     //设置JSON数据格式\n  //     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  //     config.baseURL=process.env.VUE_APP_URL_TWO;\n  //     // config.data=JSON.stringify(config.data);\n  // }\n\n  //设置JSON数据格式\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // if (config.data instanceof FormData) {\n  //     Object.assign(config.headers, config.data.getHeaders());\n  // }\n\n  return config;\n}, err => {\n  console.log(err);\n});\n\n// 数据返回拦截\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  //提取响应数据\n  let res = response.data;\n\n  // // 服务端返回的字符串数据时\n  // if (typeof res === 'string') {\n  //     res = res ? JSON.parse(res) : res\n  // }\n\n  // 多用于登录时的cookies判断\n  return res;\n}, err => {\n  console.log(err);\n});\n// // 直接返回\n// return request(config)\n\n// }\n\nexport default request;\n//     export default axios;","map":{"version":3,"names":["axios","request","create","timeout","headers","interceptors","use","config","err","console","log","response","res","data"],"sources":["D:/A/repository/private homework2/web/src/network/request.js"],"sourcesContent":["import axios from \"axios\"\r\n/*\r\n* 用于解决前后端连接的跨域问题\r\n* */\r\n\r\n    const request = axios.create({\r\n        // baseURL: '/api', // 通过/api别名指定后端路由\r\n        // baseURL: process.env.VUE_APP_URL, // 通过/api别名指定后端路由\r\n        timeout: 5000,\r\n        headers:{\r\n        },\r\n    })\r\n\r\n    // axios的拦截器(类似python的中间件的request)\r\n    // 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n    request.interceptors.request.use(config => {\r\n        // if(config.requestBase==='VUE_APP_URL'){\r\n        //     //设置JSON数据格式\r\n        //     config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        //\r\n        // }else if (config.requestBase==='VUE_APP_URL_TWO'){\r\n        //     //设置JSON数据格式\r\n        //     config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        //     config.baseURL=process.env.VUE_APP_URL_TWO;\r\n        //     // config.data=JSON.stringify(config.data);\r\n        // }\r\n\r\n\r\n        //设置JSON数据格式\r\n        config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n        // if (config.data instanceof FormData) {\r\n        //     Object.assign(config.headers, config.data.getHeaders());\r\n        // }\r\n\r\n        return config\r\n    }, err => {\r\n        console.log(err);\r\n    });\r\n\r\n\r\n    // 数据返回拦截\r\n    // 可以在接口响应后统一处理结果\r\n    request.interceptors.response.use(\r\n        response => {\r\n            //提取响应数据\r\n            let res = response.data;\r\n\r\n            // // 服务端返回的字符串数据时\r\n            // if (typeof res === 'string') {\r\n            //     res = res ? JSON.parse(res) : res\r\n            // }\r\n\r\n        // 多用于登录时的cookies判断\r\n        return res\r\n    }, err => {\r\n        console.log(err);\r\n    })\r\n    // // 直接返回\r\n    // return request(config)\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport default request;\r\n//     export default axios;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;;AAEI,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzB;EACA;EACAC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAC,CACR;AACJ,CAAC,CAAC;;AAEF;AACA;AACJ;AACIH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACAA,MAAM,CAACH,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;;EAEjE;EACA;EACA;;EAEA,OAAOG,MAAM;AACjB,CAAC,EAAEC,GAAG,IAAI;EACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AACpB,CAAC,CAAC;;AAGF;AACA;AACAP,OAAO,CAACI,YAAY,CAACM,QAAQ,CAACL,GAAG,CAC7BK,QAAQ,IAAI;EACR;EACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA;EACA;EACA;;EAEJ;EACA,OAAOD,GAAG;AACd,CAAC,EAAEJ,GAAG,IAAI;EACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AACpB,CAAC,CAAC;AACF;AACA;;AAEJ;;AAMA,eAAeP,OAAO;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
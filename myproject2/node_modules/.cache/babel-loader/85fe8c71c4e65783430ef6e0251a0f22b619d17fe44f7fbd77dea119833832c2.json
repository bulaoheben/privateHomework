{"ast":null,"code":"import router from \"../../router\";\nimport request from \"@/network/request\";\nexport default {\n  name: \"comOrderSearch\",\n  data() {\n    return {\n      d: {}\n    };\n  },\n  mounted() {\n    //获取路由上的信息\n    let query = router.currentRoute.query;\n    var documentWidth = $(document).width();\n    layui.use(['table', 'form'], function () {\n      var table = layui.table;\n      table.render({\n        elem: '#test' //绑定table表格\n        ,\n        id: 'csInfo',\n        method: 'get',\n        url: '/api/Sys/v1/orders/waiting' //后台springmvc接收路径\n        ,\n        page: {\n          //支持传入 laypage 组件的所有参数（某些参数除外，如：jump/elem） - 详见文档\n          layout: ['limit', 'count', 'prev', 'page', 'next', 'skip'] //自定义分页布局\n          //,curr: 5 //设定初始在第 5 页\n          ,\n          groups: 1 //只显示 1 个连续页码\n          ,\n          first: false //不显示首页\n          ,\n          last: false //不显示尾页\n          ,\n          limit: 10,\n          limits: [10, 20, 30]\n        },\n        cols: [[{\n          type: 'checkbox',\n          width: documentWidth * 4 / 100,\n          fixed: 'left'\n        }, {\n          field: 'oid',\n          title: '订单ID',\n          sort: true,\n          width: 100,\n          fixed: 'left'\n        }, {\n          field: 'senderName',\n          title: '发件⼈名',\n          sort: true,\n          width: 150\n        }, {\n          field: 'senderPhone',\n          title: '发件⼈电话',\n          sort: true,\n          width: 150\n        }, {\n          field: 'departure',\n          title: '发件地址',\n          sort: true,\n          width: 150\n        }, {\n          field: 'receiveName',\n          title: '收件⼈名',\n          sort: true,\n          width: 150\n        }, {\n          field: 'receivePhone',\n          title: '收件⼈电话',\n          sort: true,\n          width: 150\n        }, {\n          field: 'destination',\n          title: '收件地址',\n          sort: true,\n          width: 150\n        }, {\n          field: 'cargoType',\n          title: '货物种类',\n          sort: true,\n          width: 150\n        }, {\n          field: 'weight',\n          title: '货物重量',\n          sort: true,\n          width: 150\n        }, {\n          field: 'volume',\n          title: '货物体积',\n          sort: true,\n          width: 150\n        }, {\n          field: 'cost',\n          title: '运费',\n          sort: true,\n          width: 150\n        }, {\n          field: 'state',\n          title: '状态',\n          sort: true,\n          width: 150\n        }, {\n          field: 'submitTime',\n          title: '提交订单时间',\n          sort: true,\n          width: 150\n        }, {\n          fixed: 'right',\n          title: '操作',\n          align: 'center',\n          toolbar: '#barDemo',\n          width: 100\n        }]]\n      });\n\n      //工具条事件\n      table.on('tool(test)', function (obj) {\n        //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter=\"对应的值\"\n        const data = obj.data; //获得当前行数据\n        const layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）\n        const tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）\n\n        const oid = data.oid;\n        if (layEvent === 'receive') {\n          //接单\n          layer.confirm('是否确定接单？', function (index) {\n            //向服务端发送接单指令\n            request.post('/api/Sys/v1/orders/' + oid + '/state', {\n              coid: query.id,\n              state: '接单'\n            }).then(res => {\n              console.log(res);\n              if (res.msg === \"接单成功\") {\n                parent.layer.msg('接单成功！', {\n                  icon: 1,\n                  time: 2000,\n                  shade: 0.2\n                });\n                window.location.reload(true);\n              }\n            }).catch(e => {\n              console.log(e);\n              parent.layer.msg('接单失败，请稍后尝试！', {\n                icon: 2,\n                time: 3000,\n                shade: 0.2\n              });\n            });\n          });\n        }\n      });\n      $('.layui-btn').on('click', function () {\n        var type = $(this).data('type');\n        active[type] ? active[type].call(this) : '';\n      });\n    });\n  }\n};","map":{"version":3,"names":["router","request","name","data","d","mounted","query","currentRoute","documentWidth","$","document","width","layui","use","table","render","elem","id","method","url","page","layout","groups","first","last","limit","limits","cols","type","fixed","field","title","sort","align","toolbar","on","obj","layEvent","event","tr","oid","layer","confirm","index","post","coid","state","then","res","console","log","msg","parent","icon","time","shade","window","location","reload","catch","e","active","call"],"sources":["src/components/company/comOrderSearch.vue"],"sourcesContent":["<template>\r\n    <div>\r\n    <div class=\"x-nav\">\r\n\r\n        <a class=\"layui-btn layui-btn-small\" style=\"line-height:1.6em;margin-top:3px;float:right\" href=\"javascript:location.replace(location.href);\" title=\"刷新\">\r\n            <i class=\"layui-icon\" style=\"line-height:30px\">ဂ</i></a>\r\n    </div>\r\n\r\n\r\n\r\n    <table id=\"test\" lay-filter=\"test\">\r\n        <script type=\"text/html\" id=\"barDemo\" >\r\n            <a class=\"layui-btn layui-btn-xs\" lay-event=\"receive\">接单</a>\r\n        </script>\r\n    </table>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    import router from \"../../router\"\r\n    import request from \"@/network/request\";\r\n    export default {\r\n        name: \"comOrderSearch\",\r\n        data(){\r\n            return{\r\n                d:{}\r\n            }\r\n        },\r\n        mounted() {\r\n            //获取路由上的信息\r\n            let query = router.currentRoute.query\r\n\r\n            var documentWidth = $(document).width();\r\n            layui.use(['table','form'],function(){\r\n                var table = layui.table;\r\n                table.render({\r\n                    elem: '#test'  //绑定table表格\r\n                    ,id:'csInfo'\r\n                    ,method:'get'\r\n                    ,url: '/api/Sys/v1/orders/waiting'//后台springmvc接收路径\r\n                    ,page: { //支持传入 laypage 组件的所有参数（某些参数除外，如：jump/elem） - 详见文档\r\n                        layout: ['limit', 'count', 'prev', 'page', 'next', 'skip'] //自定义分页布局\r\n                        //,curr: 5 //设定初始在第 5 页\r\n                        ,groups: 1 //只显示 1 个连续页码\r\n                        ,first: false //不显示首页\r\n                        ,last: false //不显示尾页\r\n                        ,limit:10\r\n                        ,limits:[10,20,30]\r\n                    }\r\n                    ,cols: [\r\n                        [\r\n                            {type: 'checkbox',width:documentWidth*4/100,fixed: 'left'}\r\n                            ,{field:'oid',title:'订单ID', sort: true,width: 100,fixed: 'left'}\r\n                            ,{field:'senderName',title:'发件⼈名', sort:true,width: 150}\r\n                            ,{field:'senderPhone',title:'发件⼈电话',sort:true,width: 150}\r\n                            ,{field:'departure',title:'发件地址',sort:true,width: 150}\r\n                            ,{field:'receiveName',title:'收件⼈名',sort:true,width: 150}\r\n                            ,{field:'receivePhone',title:'收件⼈电话',sort:true,width: 150}\r\n                            ,{field:'destination',title:'收件地址',sort:true,width: 150}\r\n                            ,{field:'cargoType',title:'货物种类',sort:true,width: 150}\r\n                            ,{field:'weight',title:'货物重量',sort:true,width: 150}\r\n                            ,{field:'volume',title:'货物体积',sort:true,width: 150}\r\n                            ,{field:'cost',title:'运费',sort:true,width: 150}\r\n                            ,{field:'state',title:'状态',sort:true,width: 150}\r\n                            ,{field:'submitTime',title:'提交订单时间',sort:true,width: 150}\r\n\r\n                            ,{fixed: 'right', title:'操作', align:'center', toolbar: '#barDemo',width: 100}\r\n\r\n                        ]\r\n                    ]\r\n\r\n                });\r\n\r\n                //工具条事件\r\n                table.on('tool(test)', function(obj){ //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter=\"对应的值\"\r\n                    const data = obj.data; //获得当前行数据\r\n                    const layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）\r\n                    const tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）\r\n\r\n                    const oid =  data.oid\r\n\r\n                    if(layEvent === 'receive'){ //接单\r\n                        layer.confirm('是否确定接单？', function(index){\r\n\r\n                            //向服务端发送接单指令\r\n                            request.post(\r\n                                '/api/Sys/v1/orders/'+oid+'/state',\r\n                                {\r\n                                coid:query.id,\r\n                                    state:'接单'\r\n                            },\r\n\r\n                            ).then(res=>{\r\n                                console.log(res)\r\n                                if(res.msg===\"接单成功\") {\r\n                                    parent.layer.msg('接单成功！', {icon: 1, time: 2000, shade: 0.2});\r\n                                    window.location.reload(true);\r\n                                }\r\n                            }).catch(e=>{\r\n                                console.log(e);\r\n                                parent.layer.msg('接单失败，请稍后尝试！', {icon: 2,time:3000,shade:0.2});\r\n                            });\r\n\r\n\r\n\r\n                        });\r\n\r\n                    }\r\n                });\r\n\r\n\r\n                $('.layui-btn').on('click', function(){\r\n                    var type = $(this).data('type');\r\n                    active[type] ? active[type].call(this) : '';\r\n                });\r\n            });\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}